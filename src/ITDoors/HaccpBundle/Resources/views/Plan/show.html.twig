{% extends "::base.html.twig" %}

{% block page_title %}{% trans %}Default title{% endtrans %}{% endblock %}

{% block page_breadcrumbs %}
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <i class="fa fa-home"></i>
            <a href="{{ path('dashboard') }}">{% trans %}Home{% endtrans %}</a>
            <i class="fa fa-angle-right"></i>
        </li>
        <li><a href="#">{% trans %}Dashboard{% endtrans %}</a></li>
        <li class="pull-right">
            <div id="dashboard-report-range" class="dashboard-date-range tooltips" data-placement="top" data-original-title="Изменить дату">
                <i class="fa fa-calendar"></i>
                <span></span>
                <i class="fa fa-angle-down"></i>
            </div>
        </li>
    </ul>
{% endblock %}

{% block body %}
    <div id="map"></div>
    <div id="ajax-modal" class="modal fade" role="basic"  data-width="760"></div>
{% endblock %}

{% block css_page_level_plugin %}
    {{ parent() }}
    <link href="{{ asset('templates/leaflet/css/leaflet.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('templates/metronic/plugins/bootstrap-modal/css/bootstrap-modal-bs3patch.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('templates/metronic/plugins/bootstrap-modal/css/bootstrap-modal.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('templates/metronic/plugins/bootstrap-daterangepicker/daterangepicker-bs3.css') }}" rel="stylesheet" type="text/css" />
{% endblock %}

{% block js_page_level_plugins %}
    {{ parent() }}
    <script src="{{ asset('templates/leaflet/js/leaflet.js') }}" type="text/javascript"></script>
    <script src="{{ asset('templates/metronic/plugins/bootstrap-modal/js/bootstrap-modalmanager.js') }}" type="text/javascript"></script>
    <script src="{{ asset('templates/metronic/plugins/bootstrap-modal/js/bootstrap-modal.js') }}" type="text/javascript"></script>
    <script src="{{ asset('templates/metronic/plugins/bootstrap-daterangepicker/moment.min.js') }}" type="text/javascript"></script>
    <script src="{{ asset('templates/metronic/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js')}} " type="text/javascript" ></script>
    <script src="{{ asset('templates/metronic/plugins/bootstrap-daterangepicker/daterangepicker.js') }}" type="text/javascript"></script>
    <script src="{{ asset('templates/metronic/plugins/bootstrap-datepicker/js/locales/bootstrap-datepicker.ru.js')}} " type="text/javascript"></script>
    <script>
        $('#dashboard-report-range').daterangepicker({
                opens:  'right',
                startDate: moment().subtract('days', 29),
                endDate: moment(),
                minDate: '01/01/2012',
                maxDate: '12/31/2014',
                dateLimit: {
                    days: 60
                },
                showDropdowns: false,
                showWeekNumbers: true,
                timePicker: false,
                timePickerIncrement: 1,
                timePicker12Hour: true,
                ranges: {
                    'Сегодня': [moment(), moment()],
                    'Вчера': [moment().subtract('days', 1), moment().subtract('days', 1)],
                    'Последняя неделя': [moment().subtract('days', 6), moment()],
                    'Последние 30 дней': [moment().subtract('days', 29), moment()],
                    'Текущий месяц': [moment().startOf('month'), moment().endOf('month')],
                    'Предыдущий месяц': [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')]
                },
                buttonClasses: ['btn'],
                applyClass: 'blue',
                cancelClass: 'default',
                format: 'MM/DD/YYYY',
                separator: ' до ',
                language: 'ru',
                locale: {
                    applyLabel: 'Принять',
                    fromLabel: 'До',
                    toLabel: 'С',
                    customRangeLabel: 'Выберите интервал',
                    daysOfWeek: ["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],
                    monthNames: ["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],
                    firstDay: 1
                }
            },
            function (start, end) {
                //console.log("Callback has been called!");
                $('#dashboard-report-range span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
            }
        );

        $('#dashboard-report-range span').html(moment().subtract('days', 29).format('MMMM D, YYYY') + ' - ' + moment().format('MMMM D, YYYY'));
        $('#dashboard-report-range').show();
    </script>
    {% if plan.type == 'map' %}
    <script>
        var map = L.map('map').setView(new L.LatLng({{ plan.latitude }},{{ plan.longitude }}), 17);

        // add an OpenStreetMap tile layer
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: ''
        }).addTo(map);

        {% for point in points  %}
            var myIcon = L.divIcon({
                //html: '<div>{{ point.name }}</div>'
                html: HACCP.getPointHtml({
                    classNameStatistics: '{{ point.classNameStatistics }}',
                    value: '{{ point.pointAVG }}',
                    name: '{{ point.name }}'
                })
            });

            var marker = L.marker(new L.LatLng({{ point.mapLatitude }},{{ point.mapLongitude }}), {
                icon: myIcon
            });

            marker.addTo(map);

            marker.on('click', function(e){
                HACCP.ajaxModal('Контрольная точка ' + '{{ point.name }}', '#ajax-modal', '{{ path('point_show_ajax', { id : point.id }) }}');
            });
        {% endfor %}

        var circle = L.circle(new L.LatLng(50.51114,30.48154), 20, {
            color: 'red',
            fillColor: '#f03',
            fillOpacity: 0.5
        });

        circle.addTo(map);

        var popup = L.popup();

        circle.on('click', function(e){
            popup
                    .setLatLng(e.latlng)
                    .setContent(HACCP.getPopupHtml({
                        plans: {
                            0: { name: 'Этаж 1', url: '{{ path('plan_show', { id: 2 }) }}'},
                            1: { name: 'Этаж 2', url: '{{ path('plan_show', { id: 3 }) }}'}
                        }
                    }))
                    .openOn(map);
        });

        function onMapClick(e) {
            popup
                    .setLatLng(e.latlng)
                    .setContent("Координаты точки " + e.latlng.toString())
                    .openOn(map);
        }

        map.on('click', onMapClick);

    </script>
    {% endif %}

    {% if plan.type == 'image' %}
    <script>
        var windowWidth = $('#map').width();

        var srcWidth = '{{  plan.imageWidth }}';
        var srcHeight = '{{  plan.imageHeight }}';

        var scale = Math.ceil(srcWidth / windowWidth);

        var map = L.map('map', {
            crs: L.CRS.Simple,
            attributionControl: false
        });

        var imageUrl = '{{ plan.imageFullPath }}';
        var imageBounds = new L.LatLngBounds([0, 0], [srcHeight/scale , srcWidth/scale]);
        var options =  { noWrap: true, maxZoom: 3, minZoom: 0};

        L.imageOverlay(imageUrl, imageBounds, options).addTo(map);

        map.setView(new L.LatLng(srcHeight/scale/2, srcWidth/scale/2), 0);

        {% for point in points  %}

            var myIcon = L.divIcon({
                html: HACCP.getPointHtml({
                    classNameStatistics: '{{ point.classNameStatistics }}',
                    value: '{{ point.pointAVG }}',
                    name: '{{ point.name }}'
                })
            });

            var marker = L.marker(new L.LatLng({{ point.imageLatitude }},{{ point.imageLongitude }}), {
                icon: myIcon
            });

            marker.addTo(map);

            marker.on('click', function(e){
                HACCP.ajaxModal('Контрольная точка ' + '{{ point.name }}', '#ajax-modal', '{{ path('point_show_ajax', { id : point.id }) }}');
            });
        {% endfor %}

        var popup = L.popup();

        function onMapClick(e) {
            popup
                    .setLatLng(e.latlng)
                    .setContent("Координаты точки " + e.latlng.toString())
                    .openOn(map);
        }

        map.on('click', onMapClick);
    </script>
    {% endif %}
{% endblock %}