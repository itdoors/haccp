<?php

namespace ITDoors\HaccpBundle\Entity;

use Doctrine\ORM\Query;

/**
 * PointStatisticsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointStatisticsRepository extends BaseRepository
{
    /**
     * @var int
     */
    protected $baseStatisticsLimit;

    /**
     * Returns point statistics Query depending on options
     *
     * @param mixed[] $options
     *
     * @return Query
     */
    public function getStatisticsQuery($options)
    {
        $sql = $this->createQueryBuilder('ps')
            ->select('ps.id as id')
            ->addSelect('ps.value as value')
            ->addSelect('ps.entryDate as entryDate')
            ->addSelect('characteristic.id as characteristicId')
            ->addSelect('characteristic.name as characteristicName')
            ->addSelect('characteristic.unit as characteristicUnit')
            ->addSelect('characteristic.criticalValueTop as criticalValueTop')
            ->addSelect('characteristic.criticalValueBottom as criticalValueBottom')
            ->leftJoin('ps.characteristic', 'characteristic');

        // Start date
        if (isset($options['startDate']) && $options['startDate']) {
            $sql
                ->andWhere('ps.entryDate >= :startDate')
                ->setParameter(':startDate', $options['startDate']);
        }

        // End date
        if (isset($options['endDate']) && $options['endDate']) {
            $sql
                ->andWhere('ps.entryDate <= :endDate')
                ->setParameter(':endDate', $options['endDate']);
        }

        // Specific statistic Ids
        if (isset($options['statisticsIds']) && sizeof($options['statisticsIds'])) {
            $sql
                ->andWhere('ps.id in (:statisticsIds)')
                ->setParameter(':statisticsIds', $options['statisticsIds']);
        }

        // Point Ids
        if (isset($options['pointIds']) && is_array($options['pointIds'])) {
            $sql
                ->andWhere('ps.pointId in (:pointIds)')
                ->setParameter(':pointIds', $options['pointIds']);
        }

        if (isset($options['limit']) && $options['limit']) {
            $sql
                ->setMaxResults($options['limit']);
        }

        if (isset($options['lastStatisticId']) && $options['lastStatisticId']) {
            $sql
                ->andWhere('ps.id < :lastStatisticId')
                ->setParameter(':lastStatisticId', $options['lastStatisticId']);
        }

        $sql
            ->orderBy('ps.entryDate', 'DESC')
            ->addOrderBy('ps.id', 'DESC');

        return $sql->getQuery();
    }

    /**
     * Generates query than get all fields from db
     *
     * @param mixed[] $options
     *
     * @return Query
     */
    public function getStatisticsDBQuery($options)
    {
        if (!isset($options['id'])) {
            return null;
        }

        $sql = $this->createQueryBuilder('s')
            ->where('s.id = :id')
            ->setParameter(':id', $options['id']);

        return $sql->getQuery();
    }

    /**
     * Returns point statistics depending on options
     *
     * @param mixed[] $options
     *
     * @return mixed[]
     */
    public function getStatistics($options)
    {
        $query = $this->getStatisticsQuery($options);

        return $query->getResult();
    }

    /**
     * Returns data for backup
     *
     * @return array
     */
    public function getBackupData()
    {
        return $this->createQueryBuilder('obj')
            ->select('obj.id as id')
            ->addSelect('obj.characteristicId as characteristic_id')
            ->addSelect('obj.pointId as point_id')
            ->addSelect('obj.createdAt as created_at')
            ->addSelect('obj.entryDate as entry_date')
            ->addSelect('obj.value as value')
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * Get Infestation of all point (1,2 contour) for object
     *
     * @param CompanyObject $object
     * @param \DateTime     $date
     *
     * @return PointStatistics[]
     */
    public function getInfestation(CompanyObject $object, \DateTime $date)
    {
        return $this->createQueryBuilder('psr')
            ->leftJoin('psr.point', 'point')
            ->leftJoin('point.plan', 'plan')
            ->where('psr.characteristicId = :characteristicId')
            ->andWhere('plan.companyObjectId = :companyObjectId')
            ->setParameter(':characteristicId', 1)
            ->setParameter(':companyObjectId', $object->getId())
            ->orderBy('psr.entryDate')
            ->getQuery()
            ->getResult();
    }
}
