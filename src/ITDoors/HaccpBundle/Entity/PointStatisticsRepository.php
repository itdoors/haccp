<?php

namespace ITDoors\HaccpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * PointStatisticsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointStatisticsRepository extends EntityRepository
{
    /**
     * Returns point statistics depending on start & end date
     *
     * @param int[] $ids
     * @param int $limit
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     *
     * @return Query
     */
    public function getStatisticsQuery($ids, $limit = 10, $startDate = null, $endDate = null)
    {
        return $this->createQueryBuilder('ps')
            ->select('ps.id as id')
            ->addSelect('ps.value as value')
            ->addSelect('ps.entryDate as entryDate')
            ->addSelect('Characteristic.id as characteristicId')
            ->addSelect('Characteristic.name as characteristicName')
            ->addSelect('Characteristic.unit as characteristicUnit')
            ->addSelect('Characteristic.criticalValueTop as criticalValueTop')
            ->addSelect('Characteristic.criticalValueBottom as criticalValueBottom')
            /*->addSelect('Characteristic.criticalColorTop as criticalColorTop')
            ->addSelect('Characteristic.criticalColorMiddle as criticalColorMiddle')
            ->addSelect('Characteristic.criticalColorBottom as criticalColorBottom')*/
            /*->addSelect('
            CASE
                WHEN (ps.value > Characteristic.criticalValueTop) THEN Characteristic.criticalColorTop
                WHEN (ps.value > Characteristic.criticalValueBottom) THEN Characteristic.criticalColorMiddle
                ELSE Characteristic.criticalColorBottom
            END as pointColor')*/
            ->leftJoin('ps.Characteristic', 'Characteristic')
            ->where('ps.pointId in (:pointIds)')
            ->orderBy('ps.id', 'DESC')
            ->setMaxResults($limit)
            ->setParameter(':pointIds', $ids)
            ->getQuery();
    }

    /**
     * Return last statistics
     *
     * @param int $pointId
     * @param int $limit
     *
     * @return mixed[]
     */
    public function getLastStatistics($pointId, $limit)
    {
        $query = $this->getStatisticsQuery(array($pointId), $limit);

        return $query->getResult();
    }
}
