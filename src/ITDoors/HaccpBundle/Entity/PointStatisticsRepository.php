<?php

namespace ITDoors\HaccpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * PointStatisticsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointStatisticsRepository extends EntityRepository
{
    /**
     * Returns point statistics depending on start & end date
     *
     * @param int[] $ids
     * @param int $limit
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     * @param int[] $statisticsIds
     *
     * @return Query
     */
    public function getStatisticsQuery($ids, $limit = 10, $startDate = null, $endDate = null, $statisticsIds = array())
    {
        $sql = $this->createQueryBuilder('ps')
            ->select('ps.id as id')
            ->addSelect('ps.value as value')
            ->addSelect('ps.entryDate as entryDate')
            ->addSelect('Characteristic.id as characteristicId')
            ->addSelect('Characteristic.name as characteristicName')
            ->addSelect('Characteristic.unit as characteristicUnit')
            ->addSelect('Characteristic.criticalValueTop as criticalValueTop')
            ->addSelect('Characteristic.criticalValueBottom as criticalValueBottom')
            ->leftJoin('ps.Characteristic', 'Characteristic');

        if ($limit)
        {
            $sql
                ->setMaxResults($limit);
        }

        if ($startDate && $endDate)
        {
            $sql
                ->andWhere('ps.entryDate >= :startDate')
                ->andWhere('ps.entryDate <= :endDate')
                ->setParameter(':startDate', $startDate)
                ->setParameter(':endDate', $endDate);
        }

        if (sizeof($statisticsIds))
        {
            $sql
                ->andWhere('ps.id in (:statisticsIds)')
                ->setParameter(':statisticsIds', $statisticsIds);
        }

        $sql
            ->andWhere('ps.pointId in (:pointIds)')
            ->setParameter(':pointIds', $ids)
            ->orderBy('ps.id', 'DESC');

        return $sql->getQuery();
    }

    /**
     * Return last statistics
     *
     * @param int $pointId
     * @param int $limit
     *
     * @return mixed[]
     */
    public function getLastStatistics($pointId, $limit)
    {
        $query = $this->getStatisticsQuery(array($pointId), $limit);

        return $query->getResult();
    }

    /**
     * Returns statistics Query by range
     *
     * @param int $pointId
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     * @param int[] $statisticsIds
     *
     * @return Query
     */
    public function getRangeStatisticsQuery($pointId, $startDate, $endDate, $statisticsIds = array())
    {
        return $this->getStatisticsQuery(array($pointId), null, $startDate, $endDate, $statisticsIds);
    }

    /**
     * Returns statistics by range
     *
     * @param int $pointId
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     * @param int[] $statisticsIds
     *
     * @return mixed[]
     */
    public function getRangeStatistics($pointId, \DateTime $startDate, \DateTime $endDate, $statisticsIds = array())
    {
        $query = $this->getRangeStatisticsQuery($pointId, $startDate, $endDate, $statisticsIds);

        return $query->getResult();
    }
}
