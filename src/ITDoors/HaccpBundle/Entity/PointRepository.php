<?php

namespace ITDoors\HaccpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * PointRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointRepository extends EntityRepository
{
    /**
     * Returns point info for list
     *
     * @param int[] $planIds
     * @return Query
     */
    public function getPointsListQuery($planIds)
    {
        return $this->createQueryBuilder('p')
            ->select('p.id as id')
            ->addSelect('p.name as name')
            ->addSelect('p.imageLatitude as imageLatitude')
            ->addSelect('p.imageLongitude as imageLongitude')
            ->addSelect('p.mapLatitude as mapLatitude')
            ->addSelect('p.mapLongitude as mapLongitude')
            ->addSelect('Contour.color as contourColor')
            ->addSelect('Contour.id as contourId')
            ->addSelect('PointGroup.id as pointGroupId')
            ->addSelect('(SELECT AVG(to_integer(ps.value)) from ITDoorsHaccpBundle:PointStatistics ps where ps.pointId = p.id) as pointAVG')
            ->leftJoin('p.Contour', 'Contour')
            ->leftJoin('p.Group', 'PointGroup')
            ->where('p.planId in (:planIds)')
            ->setParameter(':planIds', $planIds)
            ->getQuery();
    }

    /**
     * Return point data for ajax show
     */
    public function getPointShowQuery($pointIds)
    {
        return $this->createQueryBuilder('p')
            ->select('p.id as id')
            ->addSelect('p.name as name')
            ->addSelect('p.installationDate as installationDate')
            ->addSelect('p.imageLatitude as imageLatitude')
            ->addSelect('p.imageLongitude as imageLongitude')
            ->addSelect('p.mapLatitude as mapLatitude')
            ->addSelect('p.mapLongitude as mapLongitude')
            ->addSelect('PointGroup.name as groupName')
            ->addSelect('Contour.color as contourColor')
            ->addSelect('Contour.name as contourName')
            ->addSelect('Plan.name as objectName')
            ->addSelect('Plan.type as planType')
            ->leftJoin('p.Contour', 'Contour')
            ->leftJoin('p.Group', 'PointGroup')
            ->leftJoin('p.Plan', 'Plan')
            ->where('p.id in (:pointIds)')
            ->setParameter(':pointIds', $pointIds)
            ->getQuery();
    }

    /**
     * Return point statistic query for show
     *
     * @param int[] $ids
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     *
     * return Query
     */
    public function getPointStatisticQuery($ids, $startDate, $endDate)
    {

    }
}
